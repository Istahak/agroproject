[
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "schemas,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "schemas.",
        "description": "schemas.",
        "detail": "schemas.",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "models,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models.",
        "description": "models.",
        "detail": "models.",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "oauth2",
        "description": "oauth2",
        "isExtraImport": true,
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "oauth2",
        "description": "oauth2",
        "isExtraImport": true,
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models",
        "description": "models",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "user",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "expert",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "chat",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "schemas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "schemas",
        "description": "schemas",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "Backend.routers.auth",
        "description": "Backend.routers.auth",
        "peekOfCode": "def login(request: schemas.UserLogin, db: Session = Depends(database.get_db)):\n    user = db.query(models.Users).filter(models.Users.email == request.email).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Invalid email or password\")\n    if not utils.verify(request.password, user.password):\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Invalid email or password\")\n    access_token_expires = timedelta(days=30) if request.remember_me else timedelta(days=1)\n    access_token = oauth2.create_access_token(data={\"user_id\": user.id}, expires_delta=access_token_expires)\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}",
        "detail": "Backend.routers.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "Backend.routers.auth",
        "description": "Backend.routers.auth",
        "peekOfCode": "router = APIRouter(tags=['Authentication'])\n@router.post('/login', status_code=status.HTTP_200_OK)\ndef login(request: schemas.UserLogin, db: Session = Depends(database.get_db)):\n    user = db.query(models.Users).filter(models.Users.email == request.email).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Invalid email or password\")\n    if not utils.verify(request.password, user.password):\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Invalid email or password\")\n    access_token_expires = timedelta(days=30) if request.remember_me else timedelta(days=1)\n    access_token = oauth2.create_access_token(data={\"user_id\": user.id}, expires_delta=access_token_expires)",
        "detail": "Backend.routers.auth",
        "documentation": {}
    },
    {
        "label": "get_chat_history",
        "kind": 2,
        "importPath": "Backend.routers.chat",
        "description": "Backend.routers.chat",
        "peekOfCode": "def get_chat_history(chat_id: str,db: Session = Depends(get_db)):\n    chat_his = db.query(models.ChatHistory).filter(models.ChatHistory.chat_id == chat_id).all()\n    # sort based on timestamp\n    chat_his.sort(key=lambda x: x.timestamp)\n    return chat_his\n@router.post(\"/chat\", response_model=schemas.ChatHistoryBase)\ndef create_chat_history(chat: schemas.ChatHistoryBase, db: Session = Depends(get_db)):\n    db_chat = models.ChatHistory(**chat.model_dump())\n    print(db_chat)\n    db.add(db_chat)",
        "detail": "Backend.routers.chat",
        "documentation": {}
    },
    {
        "label": "create_chat_history",
        "kind": 2,
        "importPath": "Backend.routers.chat",
        "description": "Backend.routers.chat",
        "peekOfCode": "def create_chat_history(chat: schemas.ChatHistoryBase, db: Session = Depends(get_db)):\n    db_chat = models.ChatHistory(**chat.model_dump())\n    print(db_chat)\n    db.add(db_chat)\n    db.commit()\n    db.refresh(db_chat)\n    return db_chat",
        "detail": "Backend.routers.chat",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "Backend.routers.chat",
        "description": "Backend.routers.chat",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/chat/{chat_id}\", response_model=List[schemas.ChatHistoryBase])\ndef get_chat_history(chat_id: str,db: Session = Depends(get_db)):\n    chat_his = db.query(models.ChatHistory).filter(models.ChatHistory.chat_id == chat_id).all()\n    # sort based on timestamp\n    chat_his.sort(key=lambda x: x.timestamp)\n    return chat_his\n@router.post(\"/chat\", response_model=schemas.ChatHistoryBase)\ndef create_chat_history(chat: schemas.ChatHistoryBase, db: Session = Depends(get_db)):\n    db_chat = models.ChatHistory(**chat.model_dump())",
        "detail": "Backend.routers.chat",
        "documentation": {}
    },
    {
        "label": "get_experts",
        "kind": 2,
        "importPath": "Backend.routers.expert",
        "description": "Backend.routers.expert",
        "peekOfCode": "def get_experts(db: Session = Depends(get_db)):\n    return db.query(models.Expert).all()\n@router.post(\"/experts/\", response_model=schemas.Expert)\ndef create_expert(expert: schemas.ExpertCreate, db: Session = Depends(get_db)):\n    db_expert = models.Expert(**expert.model_dump())\n    db.add(db_expert)\n    db.commit()\n    db.refresh(db_expert)\n    return db_expert\n@router.put(\"/experts/{expert_id}\", response_model=schemas.Expert)",
        "detail": "Backend.routers.expert",
        "documentation": {}
    },
    {
        "label": "create_expert",
        "kind": 2,
        "importPath": "Backend.routers.expert",
        "description": "Backend.routers.expert",
        "peekOfCode": "def create_expert(expert: schemas.ExpertCreate, db: Session = Depends(get_db)):\n    db_expert = models.Expert(**expert.model_dump())\n    db.add(db_expert)\n    db.commit()\n    db.refresh(db_expert)\n    return db_expert\n@router.put(\"/experts/{expert_id}\", response_model=schemas.Expert)\ndef update_expert(expert_id: int, expert: schemas.ExpertUpdate, db: Session = Depends(get_db)):\n    db_expert = db.query(models.Expert).filter(models.Expert.id == expert_id).first()\n    if db_expert is None:",
        "detail": "Backend.routers.expert",
        "documentation": {}
    },
    {
        "label": "update_expert",
        "kind": 2,
        "importPath": "Backend.routers.expert",
        "description": "Backend.routers.expert",
        "peekOfCode": "def update_expert(expert_id: int, expert: schemas.ExpertUpdate, db: Session = Depends(get_db)):\n    db_expert = db.query(models.Expert).filter(models.Expert.id == expert_id).first()\n    if db_expert is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Expert not found\")\n    for var, value in vars(expert).items():\n        setattr(db_expert, var, value) if value is not None else None\n    db.commit()\n    db.refresh(db_expert)\n    return db_expert\n@router.delete(\"/experts/{expert_id}\", response_model=schemas.Expert)",
        "detail": "Backend.routers.expert",
        "documentation": {}
    },
    {
        "label": "delete_expert",
        "kind": 2,
        "importPath": "Backend.routers.expert",
        "description": "Backend.routers.expert",
        "peekOfCode": "def delete_expert(expert_id: int, db: Session = Depends(get_db)):\n    db_expert = db.query(models.Expert).filter(models.Expert.id == expert_id).first()\n    if db_expert is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Expert not found\")\n    db.delete(db_expert)\n    db.commit()\n    return db_expert",
        "detail": "Backend.routers.expert",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "Backend.routers.expert",
        "description": "Backend.routers.expert",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/experts\", response_model=list[schemas.Expert])\ndef get_experts(db: Session = Depends(get_db)):\n    return db.query(models.Expert).all()\n@router.post(\"/experts/\", response_model=schemas.Expert)\ndef create_expert(expert: schemas.ExpertCreate, db: Session = Depends(get_db)):\n    db_expert = models.Expert(**expert.model_dump())\n    db.add(db_expert)\n    db.commit()\n    db.refresh(db_expert)",
        "detail": "Backend.routers.expert",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 2,
        "importPath": "Backend.routers.user",
        "description": "Backend.routers.user",
        "peekOfCode": "def users(db: Session = Depends(get_db)):\n    users = db.query(models.Users).all()\n    return users\n#get current username using jwt token\n@router.get(\"/users/me\")\nasync def read_users_me(current_user: schemas.TokenData = Depends(get_current_user), db: Session = Depends(get_db)):\n    user = db.query(models.Users).filter(models.Users.id == current_user.user_id).first()\n    print(user)\n    if user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")",
        "detail": "Backend.routers.user",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 2,
        "importPath": "Backend.routers.user",
        "description": "Backend.routers.user",
        "peekOfCode": "def users(user_id: int, db: Session = Depends(get_db)):\n    user = db.query(models.Users).filter(models.Users.id == user_id).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"User not found\")\n    return user\n@router.post(\"/addusers\",status_code=status.HTTP_201_CREATED)\ndef addusers(user: schemas.User, db: Session = Depends(get_db)):\n    if db.query(models.Users).filter(models.Users.email == user.email).first():\n            raise HTTPException(status_code=400, detail=\"Email already registered\")\n    #hash the password - user.password",
        "detail": "Backend.routers.user",
        "documentation": {}
    },
    {
        "label": "addusers",
        "kind": 2,
        "importPath": "Backend.routers.user",
        "description": "Backend.routers.user",
        "peekOfCode": "def addusers(user: schemas.User, db: Session = Depends(get_db)):\n    if db.query(models.Users).filter(models.Users.email == user.email).first():\n            raise HTTPException(status_code=400, detail=\"Email already registered\")\n    #hash the password - user.password\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password\n    db_user = models.Users(**user.model_dump())\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)",
        "detail": "Backend.routers.user",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "Backend.routers.user",
        "description": "Backend.routers.user",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/users\")\ndef users(db: Session = Depends(get_db)):\n    users = db.query(models.Users).all()\n    return users\n#get current username using jwt token\n@router.get(\"/users/me\")\nasync def read_users_me(current_user: schemas.TokenData = Depends(get_current_user), db: Session = Depends(get_db)):\n    user = db.query(models.Users).filter(models.Users.id == current_user.user_id).first()\n    print(user)",
        "detail": "Backend.routers.user",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "Backend.database",
        "description": "Backend.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "Backend.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "Backend.database",
        "description": "Backend.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = 'sqlite:///./test.db'\n# Create SQLAlchemy engine and session\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Define SQLAlchemy model\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db",
        "detail": "Backend.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "Backend.database",
        "description": "Backend.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Define SQLAlchemy model\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "Backend.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "Backend.database",
        "description": "Backend.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Define SQLAlchemy model\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "Backend.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "Backend.database",
        "description": "Backend.database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "Backend.database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Backend.main",
        "description": "Backend.main",
        "peekOfCode": "app = FastAPI()\napp.include_router(user.router)\napp.include_router(auth.router)\napp.include_router(expert.router)\napp.include_router(chat.router)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],",
        "detail": "Backend.main",
        "documentation": {}
    },
    {
        "label": "Users",
        "kind": 6,
        "importPath": "Backend.models",
        "description": "Backend.models",
        "peekOfCode": "class Users(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True,autoincrement=True)\n    Username = Column(String,nullable=False)\n    email = Column(String,nullable=False)\n    password = Column(String,nullable=False)\nclass Expert(Base):\n    __tablename__ = \"experts\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True)",
        "detail": "Backend.models",
        "documentation": {}
    },
    {
        "label": "Expert",
        "kind": 6,
        "importPath": "Backend.models",
        "description": "Backend.models",
        "peekOfCode": "class Expert(Base):\n    __tablename__ = \"experts\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True)\n    specialty = Column(String)\n    image_url = Column(String, nullable=True)\n    qualifications = Column(String, nullable=True)\n    achievements = Column(JSON, nullable=True)\nclass ChatHistory(Base):\n    __tablename__ = \"chat_history\"",
        "detail": "Backend.models",
        "documentation": {}
    },
    {
        "label": "ChatHistory",
        "kind": 6,
        "importPath": "Backend.models",
        "description": "Backend.models",
        "peekOfCode": "class ChatHistory(Base):\n    __tablename__ = \"chat_history\"\n    id = Column(Integer, primary_key=True, index=True, autoincrement=True)\n    chat_id = Column(String)\n    sender = Column(Boolean, nullable=False)\n    message = Column(String, nullable=False)\n    timestamp = Column(DateTime, nullable=False)",
        "detail": "Backend.models",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "Backend.oauth2",
        "description": "Backend.oauth2",
        "peekOfCode": "def create_access_token(data: dict, expires_delta: timedelta = None):\n    to_encode = data.copy()\n    expire = datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str , credentials_exception: HTTPException):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        user_id: str = str(payload.get(\"user_id\"))",
        "detail": "Backend.oauth2",
        "documentation": {}
    },
    {
        "label": "verify_access_token",
        "kind": 2,
        "importPath": "Backend.oauth2",
        "description": "Backend.oauth2",
        "peekOfCode": "def verify_access_token(token: str , credentials_exception: HTTPException):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        user_id: str = str(payload.get(\"user_id\"))\n        if user_id is None:\n            raise credentials_exception\n        token_data = schemas.TokenData(user_id=user_id)\n    except JWTError:\n        raise credentials_exception\n    return token_data",
        "detail": "Backend.oauth2",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "Backend.oauth2",
        "description": "Backend.oauth2",
        "peekOfCode": "def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    token_data = verify_access_token(token, credentials_exception)\n    return token_data",
        "detail": "Backend.oauth2",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "Backend.oauth2",
        "description": "Backend.oauth2",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict, expires_delta: timedelta = None):\n    to_encode = data.copy()\n    expire = datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})",
        "detail": "Backend.oauth2",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "Backend.oauth2",
        "description": "Backend.oauth2",
        "peekOfCode": "SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict, expires_delta: timedelta = None):\n    to_encode = data.copy()\n    expire = datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str , credentials_exception: HTTPException):",
        "detail": "Backend.oauth2",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "Backend.oauth2",
        "description": "Backend.oauth2",
        "peekOfCode": "ALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict, expires_delta: timedelta = None):\n    to_encode = data.copy()\n    expire = datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str , credentials_exception: HTTPException):\n    try:",
        "detail": "Backend.oauth2",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "Backend.oauth2",
        "description": "Backend.oauth2",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict, expires_delta: timedelta = None):\n    to_encode = data.copy()\n    expire = datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str , credentials_exception: HTTPException):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])",
        "detail": "Backend.oauth2",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "Backend.schemas",
        "description": "Backend.schemas",
        "peekOfCode": "class User(BaseModel):\n    Username: str\n    email: EmailStr\n    password: str\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    class Config:\n        orm_mode = True\nclass UserLogin(BaseModel):",
        "detail": "Backend.schemas",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "Backend.schemas",
        "description": "Backend.schemas",
        "peekOfCode": "class UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    class Config:\n        orm_mode = True\nclass UserLogin(BaseModel):\n    email: str\n    password: str\n    remember_me: Optional[bool] = False\nclass Token(BaseModel):",
        "detail": "Backend.schemas",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "Backend.schemas",
        "description": "Backend.schemas",
        "peekOfCode": "class UserLogin(BaseModel):\n    email: str\n    password: str\n    remember_me: Optional[bool] = False\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    user_id: Optional[str] = None    \nclass ExpertBase(BaseModel):",
        "detail": "Backend.schemas",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "Backend.schemas",
        "description": "Backend.schemas",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    user_id: Optional[str] = None    \nclass ExpertBase(BaseModel):\n    name: str\n    specialty: str\n    image_url: Optional[str] = None\n    qualifications: Optional[str] = None",
        "detail": "Backend.schemas",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "Backend.schemas",
        "description": "Backend.schemas",
        "peekOfCode": "class TokenData(BaseModel):\n    user_id: Optional[str] = None    \nclass ExpertBase(BaseModel):\n    name: str\n    specialty: str\n    image_url: Optional[str] = None\n    qualifications: Optional[str] = None\n    achievements: Optional[List[str]] = None\nclass ExpertCreate(ExpertBase):\n    pass",
        "detail": "Backend.schemas",
        "documentation": {}
    },
    {
        "label": "ExpertBase",
        "kind": 6,
        "importPath": "Backend.schemas",
        "description": "Backend.schemas",
        "peekOfCode": "class ExpertBase(BaseModel):\n    name: str\n    specialty: str\n    image_url: Optional[str] = None\n    qualifications: Optional[str] = None\n    achievements: Optional[List[str]] = None\nclass ExpertCreate(ExpertBase):\n    pass\nclass ExpertUpdate(ExpertBase):\n    pass",
        "detail": "Backend.schemas",
        "documentation": {}
    },
    {
        "label": "ExpertCreate",
        "kind": 6,
        "importPath": "Backend.schemas",
        "description": "Backend.schemas",
        "peekOfCode": "class ExpertCreate(ExpertBase):\n    pass\nclass ExpertUpdate(ExpertBase):\n    pass\nclass Expert(ExpertBase):\n    id: int\n    class Config:\n        orm_mode = True\nclass ChatHistoryBase(BaseModel):\n    chat_id: Optional[str]",
        "detail": "Backend.schemas",
        "documentation": {}
    },
    {
        "label": "ExpertUpdate",
        "kind": 6,
        "importPath": "Backend.schemas",
        "description": "Backend.schemas",
        "peekOfCode": "class ExpertUpdate(ExpertBase):\n    pass\nclass Expert(ExpertBase):\n    id: int\n    class Config:\n        orm_mode = True\nclass ChatHistoryBase(BaseModel):\n    chat_id: Optional[str]\n    sender: bool\n    message: str",
        "detail": "Backend.schemas",
        "documentation": {}
    },
    {
        "label": "Expert",
        "kind": 6,
        "importPath": "Backend.schemas",
        "description": "Backend.schemas",
        "peekOfCode": "class Expert(ExpertBase):\n    id: int\n    class Config:\n        orm_mode = True\nclass ChatHistoryBase(BaseModel):\n    chat_id: Optional[str]\n    sender: bool\n    message: str\n    timestamp: datetime",
        "detail": "Backend.schemas",
        "documentation": {}
    },
    {
        "label": "ChatHistoryBase",
        "kind": 6,
        "importPath": "Backend.schemas",
        "description": "Backend.schemas",
        "peekOfCode": "class ChatHistoryBase(BaseModel):\n    chat_id: Optional[str]\n    sender: bool\n    message: str\n    timestamp: datetime",
        "detail": "Backend.schemas",
        "documentation": {}
    },
    {
        "label": "hash",
        "kind": 2,
        "importPath": "Backend.utils",
        "description": "Backend.utils",
        "peekOfCode": "def hash(password: str):\n    return pwd_context.hash(password)\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "Backend.utils",
        "documentation": {}
    },
    {
        "label": "verify",
        "kind": 2,
        "importPath": "Backend.utils",
        "description": "Backend.utils",
        "peekOfCode": "def verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "Backend.utils",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "Backend.utils",
        "description": "Backend.utils",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef hash(password: str):\n    return pwd_context.hash(password)\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "Backend.utils",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "Frontend.node_modules.flatted.python.flatted",
        "description": "Frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "Frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "Frontend.node_modules.flatted.python.flatted",
        "description": "Frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "Frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "Frontend.node_modules.flatted.python.flatted",
        "description": "Frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "Frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "Frontend.node_modules.flatted.python.flatted",
        "description": "Frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "Frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "Frontend.node_modules.flatted.python.test",
        "description": "Frontend.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "Frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Frontend.node_modules.flatted.python.test",
        "description": "Frontend.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "Frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "Frontend.node_modules.flatted.python.test",
        "description": "Frontend.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "Frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "Frontend.node_modules.flatted.python.test",
        "description": "Frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "Frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Frontend.node_modules.flatted.python.test",
        "description": "Frontend.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "Frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "Frontend.node_modules.flatted.python.test",
        "description": "Frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "Frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "Frontend.node_modules.flatted.python.test",
        "description": "Frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "Frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "Frontend.node_modules.flatted.python.test",
        "description": "Frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "Frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "Frontend.node_modules.flatted.python.test",
        "description": "Frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "Frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "Frontend.node_modules.flatted.python.test",
        "description": "Frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "Frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "Frontend.node_modules.flatted.python.test",
        "description": "Frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "Frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "Frontend.node_modules.flatted.python.test",
        "description": "Frontend.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "Frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "Frontend.node_modules.flatted.python.test",
        "description": "Frontend.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "Frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "Frontend.node_modules.flatted.python.test",
        "description": "Frontend.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "Frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "Frontend.node_modules.flatted.python.test",
        "description": "Frontend.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "Frontend.node_modules.flatted.python.test",
        "documentation": {}
    }
]